apiVersion: v1
kind: ServiceAccount
metadata:
  name: pulumi-tester
  namespace: pulumi
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pulumi-tester
  namespace: pulumi
rules:
  - apiGroups: ["pulumi.com"]
    resources: ["stacks", "programs"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pulumi-tester
  namespace: pulumi
subjects:
  - kind: ServiceAccount
    name: pulumi-tester
roleRef:
  kind: Role
  name: pulumi-tester
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pulumi-tester
  namespace: pulumi
data:
  pulumi-org: aws-partnership
  pulumi-k8s-operator-test.sh: |-
    #!/bin/bash
    set -e

    RANDOM_SUFFIX=$(date +%s)-$RANDOM
    MANIFEST_FILENAME=/tmp/pulumi-test-stack-${RANDOM_SUFFIX}.yaml

    # Create a new, unique stack name. The name of the stack must be unique for each
    # run for 2 reasons:
    # 1. To ensure that each test run on the current platform starts from a known
    #    state, free from any previously test runs.
    # 2. To ensure that we don't get colliding updates as AWS runs the test
    #    simultaneously on different EKS-A platforms.
    TEST_PULUMI_STACK_NAME=test-${RANDOM_SUFFIX}

    STACKPATH=${PULUMI_ORG}/eks-pulumi-operator-test/${TEST_PULUMI_STACK_NAME}

    echo ""
    echo "Writing out test manifest file '${MANIFEST_FILENAME}'"
    # Note that while we use a random Pulumi stack name within the Stack resource,
    # we keep the name of the Kubernetes Stack and Program resources static. This is
    # intentional. If a test fails, we don't want it to leave superfluous Stack and
    # Program K8s resources behind because the operator will keep trying to
    # reconcile them. (The test failed - they should never be re-run again.)
    # Instead, we want to reuse the same Kubernetes resource over and over but have
    # it generate a new, uniquely-named Pulumi stack.
    cat << EOF > $MANIFEST_FILENAME
    apiVersion: pulumi.com/v1
    kind: Program
    metadata:
      name: eks-pulumi-operator-test
      namespace: pulumi
    program:
      resources:
        myRandomPet:
          type: random:RandomPet
      outputs:
        petName: \${myRandomPet.id}
    ---
    apiVersion: pulumi.com/v1
    kind: Stack
    metadata:
      name: eks-pulumi-operator-test
      namespace: pulumi
    spec:
      stack: ${STACKPATH}
      programRef:
        name: eks-pulumi-operator-test
      destroyOnFinalize: true
      envRefs:
        PULUMI_ACCESS_TOKEN:
          type: Secret
          secret:
            name: pulumi-access-token
            key: accessToken
    EOF

    echo ""
    echo "Deploying sample stack and program."
    kubectl apply -f $MANIFEST_FILENAME

    echo ""
    echo "Waiting for the operator to deploy the stack."
    kubectl wait -n pulumi stack/eks-pulumi-operator-test --for=condition=Ready --timeout=180s

    echo ""
    echo "Verifying that the stack exists."
    curl \
      -s \
      --fail \
      -H "Accept: application/vnd.pulumi+8" \
      -H "Content-Type: application/json" \
      -H "Authorization: token $PULUMI_ACCESS_TOKEN" \
      https://api.pulumi.com/api/stacks/${STACKPATH}

    echo ""
    echo "Destroying K8s Stack resource"
    kubectl delete -n pulumi stacks/eks-pulumi-operator-test

    echo ""
    echo "Waiting for the operator to remove the stack"
    kubectl wait -n pulumi stack/eks-pulumi-operator-test --for=delete --timeout=180s

    echo ""
    echo "Verifying the stack no longer exists"
    STATUSCODE=$(curl \
      -s \
      -o /dev/null \
      --w "%{http_code}" \
      -H "Accept: application/vnd.pulumi+8" \
      -H "Content-Type: application/json" \
      -H "Authorization: token $PULUMI_ACCESS_TOKEN" \
      https://api.pulumi.com/api/stacks/${STACKPATH}
    )

    if test $STATUSCODE -ne 404; then
      echo "ERROR: Expected HTTP status code 404 from the Pulumi Cloud API when querying the stack. Got HTTP status code $STATUSCODE instead."
      false
    fi

    # This is for purely for running the script locally. Since the K8s tester Job is
    # run in an ephemeral container, deleting the file is unnecessary in that
    # context:
    echo ""
    echo "Deleting test manifest file '${MANIFEST_FILENAME}'"
    rm ${MANIFEST_FILENAME}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pulumi-k8s-operator-test
  namespace: pulumi
spec:
  schedule: "10 10 * * *"
  jobTemplate:
    spec:
      activeDeadlineSeconds: 900
      template:
        spec:
          serviceAccountName: pulumi-tester
          containers:
            - command:
                - bash
                - /scripts/pulumi-k8s-operator-test.sh
              image: "alpine/k8s:1.26.2"
              name: script
              env:
                - name: PULUMI_ACCESS_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: pulumi-access-token
                      key: accessToken
                - name: PULUMI_ORG
                  valueFrom:
                    configMapKeyRef:
                      name: pulumi-tester
                      key: pulumi-org
              volumeMounts:
                - name: pulumi-tester-configmap
                  mountPath: /scripts/pulumi-k8s-operator-test.sh
                  subPath: pulumi-k8s-operator-test.sh
                  readOnly: false
          restartPolicy: Never
          volumes:
            - name: pulumi-tester-configmap
              configMap:
                name: pulumi-tester
                defaultMode: 0777
